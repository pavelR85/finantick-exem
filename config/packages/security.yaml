security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
        user_and_agent_provider:
            chain:
                providers: [ user_provider, agent_provider ]

        user_provider:
            entity:
                class: App\Entity\User
                property: username

        agent_provider:
            entity:
                class: App\Entity\Agent
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            lazy: true
            remember_me:
                secret: '%kernel.secret%'
            stateless: false
            provider: user_and_agent_provider
            form_login:
                login_path: /
                check_path: app_login
#                enable_csrf: true
#                default_target_path: dashboard
            logout:
                path: app_logout
                target: /
            entry_point: App\Security\LoginFormAuthenticator
            user_checker: App\Security\UserChecker

#        secure:
#            pattern: ^/dashboard
#            lazy: true
#            provider: user_and_agent_provider
#            #provider: users_in_memory
##            provider: user_and_agent_provider
#            custom_authenticator: App\Security\LoginFormAuthenticator
#            remember_me:
#                secret: '%kernel.secret%'
#            # Enable session-based authentication
#            stateless: false
##            user_checker: App\Security\UserChecker
#            # activate different ways to authenticate
#            # https://symfony.com/doc/current/security.html#the-firewall
#
#            # https://symfony.com/doc/current/security/impersonating_user.html
#            # switch_user: true
#
#            form_login:
#                login_path: app_login
#                check_path: app_login
#                enable_csrf: true
#                default_target_path: dashboard
#            logout:
#                path: app_logout
#                target: app_login
#            entry_point: App\Security\LoginFormAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY  }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/dashboard, roles: [ROLE_USER,ROLE_ADMIN,ROLE_REP] }
        - { path: ^/user, roles: [ROLE_USER,ROLE_ADMIN,ROLE_REP] }
        - { path: ^/agent, roles: [ROLE_USER,ROLE_ADMIN,ROLE_REP] }

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_REP]
        ROLE_REP: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
